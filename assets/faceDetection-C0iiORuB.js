import{n as i,d,T as f,e as h}from"./face-api-kZYuyVWc.js";let n=!1;const m=async()=>{if(!n)try{const r="/parentFaces/models";console.log("Loading models from:",r),await Promise.all([i.tinyFaceDetector.loadFromUri(r),i.faceLandmark68Net.loadFromUri(r),i.faceRecognitionNet.loadFromUri(r),i.faceExpressionNet.loadFromUri(r)]),n=!0,console.log("Face-api.js models loaded successfully")}catch(e){throw console.error("Error loading face-api.js models:",e),e}},g=async(e,r=.5)=>{n||await m();try{if(!e||!e.complete||e.naturalWidth===0)throw new Error("Invalid image provided for face detection");const o=Math.max(.1,Math.min(.9,r));console.log(`Detecting faces with threshold ${o}...`);const s=await d(e,new f({inputSize:416,scoreThreshold:o})).withFaceLandmarks().withFaceDescriptors();console.log(`Detected ${s.length} faces with threshold ${o}`);const a=s.filter(t=>t.descriptor?t.descriptor.length!==128?(console.warn(`Face descriptor has unexpected length: ${t.descriptor.length}, skipping`),!1):Array.from(t.descriptor).some(l=>!isFinite(l)||isNaN(l))?(console.warn("Face descriptor contains invalid values, skipping"),!1):!0:(console.warn("Face detection missing descriptor, skipping"),!1));return console.log(`${a.length} valid face detections after filtering`),a.map((t,c)=>({id:`face_${c}`,box:t.detection.box,landmarks:t.landmarks,descriptor:t.descriptor,confidence:t.detection.score}))}catch(o){throw console.error("Error detecting faces:",o),new Error(`Face detection failed: ${o.message}`)}},p=(e,r)=>{if(!e||!r)return 0;const o=h(e,r);return Math.max(0,1-o)},w=(e,r)=>{if(!e||!r||r.length===0)return null;let o=null,s=0;return r.forEach(a=>{const t=p(e.descriptor,a.descriptor);t>s&&(s=t,o={face:a,similarity:t})}),o};export{p as calculateSimilarity,g as detectFaces,w as findBestMatch,m as loadModels};
