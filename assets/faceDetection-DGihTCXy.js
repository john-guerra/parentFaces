import{n as a,d as l,T as n,e as d}from"./face-api-kZYuyVWc.js";let i=!1;const m=async()=>{if(!i)try{const e="/parentFaces/models";console.log("Loading models from:",e),await Promise.all([a.tinyFaceDetector.loadFromUri(e),a.faceLandmark68Net.loadFromUri(e),a.faceRecognitionNet.loadFromUri(e),a.faceExpressionNet.loadFromUri(e)]),i=!0,console.log("Face-api.js models loaded successfully")}catch(o){throw console.error("Error loading face-api.js models:",o),o}},u=async(o,e=.5)=>{i||await m();try{const r=await l(o,new n({inputSize:416,scoreThreshold:e})).withFaceLandmarks().withFaceDescriptors();return console.log(`Detected ${r.length} faces with threshold ${e}`),r.map((t,s)=>({id:`face_${s}`,box:t.detection.box,landmarks:t.landmarks,descriptor:t.descriptor,confidence:t.detection.score}))}catch(r){throw console.error("Error detecting faces:",r),r}},f=(o,e)=>{if(!o||!e)return 0;const r=d(o,e);return Math.max(0,1-r)},p=(o,e)=>{if(!o||!e||e.length===0)return null;let r=null,t=0;return e.forEach(s=>{const c=f(o.descriptor,s.descriptor);c>t&&(t=c,r={face:s,similarity:c})}),r};export{f as calculateSimilarity,u as detectFaces,p as findBestMatch,m as loadModels};
